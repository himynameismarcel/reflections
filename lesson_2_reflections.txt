# 16.04.2017 - Reflection Notes No. 2
# Udacity Git and GitHub - Course

# Question: What happens when you initialize a repository? Why do you need to do it?

# My own thoughts on this:
Initializing a repository creates a hidden folder called .git which then allows the
user to track files by means of commit.
Without git init this repository will not be created and the files in a folder are
just ordinary files in an ordinary folder.



# Question: How is the staging area different from the working directory and the repository? What value do you think it offers?

# My own thoughts on this:
As far as I understood it, the staging area allows the user to decide which
files should be 'tracked' as part of the git-repository. As such, it is an
intermediate step that lets us easily manage files we want to ultimately commit
or decide not to commit.


# Question: How can you use the staging area to make sure you have one commit per logical change?

# My thoughts on this: The staging area is a preliminary stage before commiting
changes to files or reverting those changes and going back to the version a file
had before introducing any changes.
The staging area therefore should always be filled with the files that relate
to a logical change and then commited at once.


# Question: What are some situations when branches would be helpful in keeping your history organized? How would branches help?

# My thoughts on this: 
Branches allow us to depart from linear versioning into different 'branches' of
one and the same project. Each 'branch' has then again its own linear versioning
history and allows to work on versions that differ in the core but have
entirely different features or differ otherwise etc.

# very useful command:
git log --graph --oneline master easy-mode
git checkout -b new_branch_name

# Question: How do the diagrams help you visualize the branch structure?
# My thoughts on this: The diagrams help us to visualize the entire version
structure of our project in case we get/got lost or want to be sure where
we are and where we want to go. Without a diagram we would have to make our
own diagram to be able to follow-up with our projects versions.

git diff 5ede836903881848fea811df5b687b59d962da3 4035769377cce96a88d5c1167079e12f30492391


# Question: What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

# My thoughts on this: Merging two branches allows to combine two branch-paths
together into one and thereby adding features of both versions into one new
branch incorporating both branch-paths. We represent it in the diagram in the
way we do because by merging branches, the entire previous branch-path of the
respective merged branches is still reachable!





